2018.10.17

[내용정리]

  5. Pandas 시작하기 (계속)
	- 인덱싱 (계속)
	  - del: 열 삭제만 가능, 한번에 1개만 삭제 가능, rollback 불가능 (바로반영)
	    ★ del high_points / del df.high_points 는 오류!
	  - drop(): 행 삭제 가능, rollback 가능 (옵션으로 지정 가능)
	  - 여러 열 인덱싱: [] 안에 컬럼 이름으로 구성된 리스트 제공
	  - 특정열 선택, 값 대입도 가능
	    e.g) df['penalty'] = 0.2
		 df['penalty'] = [0.1,0.2,0.3,0.4,0.5]
	  - 기존 column들을 바탕으로 연산하여 새 column을 만들 수도 있움
	    e.g) df['net_points'] = df['points'] - df['penalty']
		 df['high_points'] = df['net_points'] > 2.0
	  - ★ df[] 방식은 column indexing에만 쓰자! (row indexing에서는 다른 방식)

	  - ★ df 인덱싱을 위한 함수들을 기억하자!
	    - 행/열 선택: loc / iloc
	      - df.loc[<행이름>, <열이름>]: 행을 가져올 때도 Series의 형태로 가져옴
				    실제 인덱스를 사용하여 행을 가져옴
				    콜론(:)을 이용한 범위 지정 시에는 대괄호 불필요
				    대괄호는 여러 index를 개별 지정시에만 필요
		e.g) df.loc["two"]: 행 two를가져옴
		     df.loc[<행시작이름>:<행종료이름>, <열시작이름>:<열종료이름>] ★이름으로 지정시 마지막 인덱스도 포함!!!!
		     df.loc["two":"four", "points" ]
		     df.loc[ [행1, 행2, 행3], [열1, 열2, 열3] ]
		     df.loc[:, ["year", "names"]]
	      - df.iloc[<행>, <열>]: numpy의 array 인덱싱 방식으로 행을 반환
		e.g) df.iloc[<행시작>:<행종료>, <열시작>:<열종료>] ★ 숫자로 인덱싱 시 종료 인덱스는 제외됨!
		     df.iloc[ [행1, 행2, 행3], [열1, 열2, 열3] ]

	    - 삭제: del 키워드 / drop 메소드
	      - del은 파이썬 키워드
	      - drop(): 인덱스를 받고 axis = 0은 행, axis = 1은 열 기준
			범위로 인덱싱은 불가능!
	        e.g) df.drop(["Colorado", "Ohio"])
		     df.drop(["two","four"], axis = 1)

	    - 정렬: sort_index (인덱스별로 정렬) (numpy와 다르게 ascending = True/False 로 오름차순/내림차순 가능)
		    sort_values (값별로 정렬)

	  - pd.date_range(<날짜>, periods = <숫자>) : 시간형식 range

	  - ★ df.dropna(how='any'/'all', inplace = False/True) : NaN 떨구기

	  - ★ df.fillna(value=<숫자>, inplace = False/True) : NaN 채우기

	  - df.isnull(): NaN 있는지 확인하여 불리언 마스크 형식으로 반환
	
	  - df.unique(): 유일한 값 리스팅
	  - df.value_counts(): 값별로 카운트
	  - df.isin([]): [] 안에 있는 값이 있는지 여부를 불리언 마스크로 반환

	- 통계 메소드
	  - 분산
	  - 공분산
	  - 상관관계
	  - 상관계수: pd.corr(), np.corrcoef()

	- df.apply
	  - numpy의 유니버셜 함수처럼 pandas 객체에 배열의 원소별로 메소드를 적용할 수 있도록 함


  6. 데이터 로딩, 저장, 파일 형식
	- csv (Comma-Seperated Values)
	  - 라이브러리: CSV / 입력함수: reader / 출력함수: writer
	  - Numpy / loadtxt, genfromtxt, fromfile / savetxt, ndarray.tofile
	  - pandas / read_csv / to_csv

	- xls
	  - xlrd / open_workbook / -
	  - xlwt / - / save

	- xlsx/xlsm/xltx/xltm
	  - openpyxl / load_workbook ...
	  - xlwings / Workbook.caller

	- pickle: 파이썬 데이터 객체를 직렬화하여 파일에 저장하거나, 파일로부터 역직렬화하여 네임스페이스에 파이선 객체로 읽어들이는 표준 라이브러리
	  - pickle / load / dump
	
	- numpy 바이너리 (npy, npz)
	  - NumPy / load / save, savez

	- HDF5 (h5, hdf5): Hierarchical DAta Format 5, 계층적 구조를 가진 대규모 데이터 저장 포맷, 개방형 포맷, 무료사용가능
	  - h5py / File ...

	- MAT-file (.mat)
	  - SciPy / io.loadmat / io.savemat

	(json: JavaScript Object Notation)


	- ★ pandas 데이터 입출력 함수
	  - 데이터 포맷 / 함수 / 출력 메서드
	  - 텍스트파일 / read_csv, read_table, read_fwf (컬럼폭이 고정된 포맷, 구분자 불필요) / to_csv
	  - json / read_json / to_json (json은 JSON 라이브러리를 써도 됨)
	  - HTML / read_html / to_html
	  - Excel / read_excel / to_excel
	  - HDF5 / read_hdf / to_hdf
	  - SQL / read_sql / to_sql
	  - Stata / read_stata / to_stata
	  - 클립보드 / read_clipboard / to_clip
	  - pickle / read_pickle / to_pickle
	  
	  - read_csv와 read_table은 비슷비슷하나 구분자의 기본값이 컴마(,)이냐 탭(\t)이냐의 차이
	  - read_csv는 함수, to_csv는 pandas의 데이터프레임의 메소드 (따라서 pd.read_csv(), pd.DataFrame.to_csv() 정도로 쓰는 방식이 차이가 있다)


  8. 도식화와 시각화

	- IPython과 matplotlib 간의 결합
	- 주피터 매직명령어
	  - %matplotlib: 플롯팅 옵션을 지정
	  - %matplotlib nbagg: 인터랙티브하게 조작할 수 있음
	  - %matplotlib inline: 플롯을 일단 생성하면 조작할 수 없게 함

	- Figure와 서브플롯
	  - matplotlib에서 그래프는 Figure 객체 내에 존재
	  - Figure: 이 안에 1개 혹은 복수개의 플롯을 그리고 관리할 수 있또록 하는 기능을 지원
	  - subplot: figure안에 들어가는 플롯 공간 하나
	  - 빈 좌표평면은 axes라고 함 (axis의 복수형)
	  - plt.plot( <데이터>, <형식> )
		- <형식> 내 color: b(blue), g(green), r(red), c(cyan), m(magenta), y(yellow), k(black), w(white)
		- <형식> 내 line: '-'(solid line), '--'(dashed line), '-.'(dash-dotted line), ':'(dotted line), None(draw nothing)
		- marker: '.'(point), ','(pixel), 'o'(circle), 'v'(triangle down), '^'(triangle up), '<'(triangle left), '>'(triangle right), 's'(square), 'p'(pentagon), 'h'(hexagon), '+'(plus), 'x'(X), 'D'(diamond), '8'(octagon)

	- 눈금, 라벨, 범례
	  - xtick: 수평축 눈금
	  - ytick: 수직축 눈금
	  - ax.set_xticks(): 수평축의 눈금을 다른 것으로 변경
	  - ax.legend(): axes상에 범례가 표시

	- 그래프 저장
	  - plt.savefig( <파일명> )
	    - fname: 파일경로나 포맷
	    - dpi: figure의 해상도 dpi. 기본값 100
	    - facecolor, edge color: 서브플롯 바깥 배경 색상. 기본값 w(흰색)
	    - format: 명시적 파일 포맷
	    - bbox_inches: figure에서 저장할 부분. 'tight'로 할 경우 figure 둘레의 비어있는 공간 모두 제거

	- numpy와 pandas를 통해 plotting이 용이
	- Series와 DataFrame을 plot()이라는 메소드를 통해 다양하게 그릴 수 있음
	- plot() 메소드의 기본 default kind는 line
	  - kind: line 선그래프
	  - kind: bar 수직막대그래프
	  - kind: barh 수평막대그래프
	  - kind: kde 밀도그래프 (Kernel Density Estimate) 커널밀도그래프...
	  - stacked=True 쌓아주는 형식 e.g) 2014년 정당별 의석 비율 (색깔별로 쌓아주는거)

	- histogram
	  - bin: 각 구간에 속하는 값의 개수를 카운팅 할 때, 구간의 개수는 기본 10개
	  - normed: True인 경우 정규화된 값으로 히스토그램을 그림 (각 bin에 속하는 갯수 / 전체갯수)

	- scatter
	  - 산포도(산점도)